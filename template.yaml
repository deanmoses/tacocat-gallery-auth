# -----------------------------------------------------------------------------
# This is a AWS Serverless Application Model (SAM) template
# It defines the "stack" of AWS resources needed to run the SAM app
# -----------------------------------------------------------------------------
AWSTemplateFormatVersion: 2010-09-09

# -----------------------------------------------------------------------------
# This particular template defines the authentication API for Tacocat Gallery
# -----------------------------------------------------------------------------
Description: Tacocat gallery authentication API

# -----------------------------------------------------------------------------
# This file is written in SAM syntax, and gets transfomed and expanded into a  
# CloudFormation template.  The CloudFormation template is what actually gets 
# deployed.  The main point is that SAM syntax is much simpler, with a lot less
# boilerplate around declaring resources like Lambda functions and their 
# accompanying execution roles.
# -----------------------------------------------------------------------------
Transform: AWS::Serverless-2016-10-31

# -----------------------------------------------------------------------------
# Parameters that can be specified when deploying this template
# This is the only way to define constants for use elsewhere in the template
# -----------------------------------------------------------------------------
Parameters:
  Env:
    Description: Environment for which the infrastructure will be deployed
    Type: String
    AllowedValues:
      - dev
      - prod
    ConstraintDescription: Must be either 'dev' or 'prod'
  GalleryAppDomain:
    Description: Domain of the Tacocat photo gallery web app 
    Type: String
    AllowedValues:
      - staging-pix.tacocat.com
      - pix.tacocat.com
    ConstraintDescription: Must be either 'staging-pix.tacocat.com' or 'pix.tacocat.com'
  DomainCertificateArn:
    Description: ARN of the ACM certificate for the GalleryAppDomain domain
    Type: String
    AllowedValues:
      - arn:aws:acm:us-east-1:010410881828:certificate/092ab57c-f87d-4c44-a72c-63cfbbb55800 # staging-pix.tacocat.com
      - arn:aws:acm:us-east-1:010410881828:certificate/e142cda0-96db-4651-92fd-35dd9a52e9a2 # pix.tacocat.com
  CognitoUserPoolID:
    Description: ID of Cognito user pool
    Type: String
  CognitoBaseURI:
    Description: Root URL of the user pool
    Type: String
  CognitoClientID:
    Description: ID of the app client created in AWS Cognito.  It's found in AWS Cognito under App client information > Client ID
    Type: String
  CognitoLogoutCallbackURI:
    Description: Path within the gallery web app (GalleryAppBaseURI) to send users after Cognito logs them out.
    Type: String
    Default: /

# ------------------------------------------------------------------------------
# Configuration inheritable by all Lambda functions and other types of Resources
# ------------------------------------------------------------------------------
Globals:
  Function:
    Runtime: nodejs18.x
    Architectures:
      - x86_64
    MemorySize: 128
    Timeout: 100
    Environment:
        Variables:
          GalleryAppDomain: !Ref GalleryAppDomain
  Api:
    Name: !Sub Tacocat Gallery Auth API - ${Env}
    Domain:
      DomainName: !Sub auth.${GalleryAppDomain}
      CertificateArn: !Ref DomainCertificateArn
    Cors:
      AllowMethods: "'GET,OPTIONS'"
      AllowHeaders: "'content-type,origin'"
      AllowOrigin: !Sub "'https://${GalleryAppDomain}'"
      AllowCredentials: true

# -----------------------------------------------------------------------------
# Resources are the actual AWS systems that will be provisioned
# -----------------------------------------------------------------------------
Resources:

  # -----------------------------------------------------------------------------
  # A Layer is a set of files that gets zipped up and included with a Lambda
  # This contains the TypeScript library modules that Lambda functions will call
  # -----------------------------------------------------------------------------
  LayerCommons:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: src/layers/commons/
      CompatibleRuntimes:
        - nodejs18.x
      RetentionPolicy: Delete
    Metadata:
      BuildMethod: makefile


  # Lambda for retrieving authentication status
  AuthStatusFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-AuthStatus
      Description: HTTP GET method to get authentication status
      Handler: src/handlers/authStatus.handler
      Layers:
        - !Ref LayerCommons
      Environment:
        Variables:
          AuthAppDomain: !Sub auth.${GalleryAppDomain}
          GalleryAppBaseURI: !Sub https://${GalleryAppDomain}
          CognitoUserPoolID: !Ref CognitoUserPoolID
          CognitoBaseURI: !Ref CognitoBaseURI
          CognitoClientID: !Ref CognitoClientID
          CognitoLogoutCallbackURI: !Ref CognitoLogoutCallbackURI
          CognitoClientSecret: "{{resolve:secretsmanager:Tacocat/Gallery/Authentication:SecretString:TacocatGalleryCognitoClientSecret}}"
      Events:
        Api:
          Type: Api
          Properties:
            Path: /
            Method: GET
    Metadata:
      BuildProperties:
        External:
          commons

  # Lambda for redirecting to the AWS Cognito login page
  RedirectToCognitoFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-RedirectToCognito
      Description: HTTP GET method for redirecting to the AWS Cognito login page
      Handler: src/handlers/redirectToCognito.handler
      Layers:
        - !Ref LayerCommons
      Environment:
        Variables:
          AuthAppDomain: !Sub auth.${GalleryAppDomain}
          GalleryAppBaseURI: !Sub https://${GalleryAppDomain}
          CognitoUserPoolID: !Ref CognitoUserPoolID
          CognitoBaseURI: !Ref CognitoBaseURI
          CognitoClientID: !Ref CognitoClientID
          CognitoLogoutCallbackURI: !Ref CognitoLogoutCallbackURI
          CognitoClientSecret: "{{resolve:secretsmanager:Tacocat/Gallery/Authentication:SecretString:TacocatGalleryCognitoClientSecret}}"
      Events:
        Api:
          Type: Api
          Properties:
            Path: /login
            Method: GET
    Metadata:
      BuildProperties:
        External:
          commons

  # Lambda for handling the login callback from the AWS Cognito login page
  LoginCallbackFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-LoginCallback
      Description: Handles the login callback from the AWS Cognito login page
      Handler: src/handlers/loginCallback.handler
      Layers:
        - !Ref LayerCommons
      Environment:
        Variables:
          AuthAppDomain: !Sub auth.${GalleryAppDomain}
          GalleryAppBaseURI: !Sub https://${GalleryAppDomain}
          CognitoUserPoolID: !Ref CognitoUserPoolID
          CognitoBaseURI: !Ref CognitoBaseURI
          CognitoClientID: !Ref CognitoClientID
          CognitoLogoutCallbackURI: !Ref CognitoLogoutCallbackURI
          CognitoClientSecret: "{{resolve:secretsmanager:Tacocat/Gallery/Authentication:SecretString:TacocatGalleryCognitoClientSecret}}"
      Events:
        Api:
          Type: Api
          Properties:
            Path: /login_callback
            Method: GET
    Metadata:
      BuildProperties:
        External:
          commons

  # Lambda for logging the user out
  LogoutFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-Logout
      Description: Log the user out
      Handler: src/handlers/logout.handler
      Layers:
        - !Ref LayerCommons
      Environment:
        Variables:
          AuthAppDomain: !Sub auth.${GalleryAppDomain}
          GalleryAppBaseURI: !Sub https://${GalleryAppDomain}
          CognitoUserPoolID: !Ref CognitoUserPoolID
          CognitoBaseURI: !Ref CognitoBaseURI
          CognitoClientID: !Ref CognitoClientID
          CognitoLogoutCallbackURI: !Ref CognitoLogoutCallbackURI
          CognitoClientSecret: "{{resolve:secretsmanager:Tacocat/Gallery/Authentication:SecretString:TacocatGalleryCognitoClientSecret}}"
      Events:
        Api:
          Type: Api
          Properties:
            Path: /logout
            Method: GET
    Metadata:
      BuildProperties:
        External:
          commons

# -----------------------------------------------------------------------------
# Outputs
# -----------------------------------------------------------------------------
Outputs:
  AwsApi:
    Description: AWS API URL (not used)
    Value: !Sub https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/

  Api:
      Description: API URL (use this)
      Value: !Sub https://auth.${GalleryAppDomain}