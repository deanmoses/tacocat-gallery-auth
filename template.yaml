# -----------------------------------------------------------------------------
# This is a AWS Serverless Application Model (SAM) template
# It defines the "stack" of AWS resources needed to run the SAM app
# -----------------------------------------------------------------------------
AWSTemplateFormatVersion: 2010-09-09

# -----------------------------------------------------------------------------
# This particular SAM template defines the authentication API for Tacocat's
# photo gallery.
# -----------------------------------------------------------------------------
Description: Tacocat Gallery authentication API

# -----------------------------------------------------------------------------
# This file is written in SAM syntax, and gets transfomed and expanded into a  
# CloudFormation template.  The CloudFormation template is what actually gets 
# deployed.  The main point is that SAM syntax is much simpler, with a lot less
# boilerplate around declaring resources like Lambda functions and their 
# accompanying execution roles.
# -----------------------------------------------------------------------------
Transform:
- AWS::Serverless-2016-10-31

# -----------------------------------------------------------------------------
# Parameters that can be specified when deploying this template
# This is the only way to define constants for use elsewhere in the template
# -----------------------------------------------------------------------------
Parameters:
  GalleryAppBaseURI:
    Type: String
    Default: https://pix.tacocat.com
    Description: Root URL of the Tacocat photo gallery web app, like https://pix.tacocat.com
  AuthAppDomain:
    Type: String
    Default: auth.pix.tacocat.com
    Description: Domain of this authentication app.  Must be a subdomain of GalleryAppBaseURI for the cookies to work.
  CognitoUserPoolID:
    Type: String
    Default: us-east-1_DdPFtamLz
  CognitoBaseURI:
    Type: String
    Default: https://tacocatgallerytest.auth.us-east-1.amazoncognito.com
    Description: Root URL of the user pool.  It's found in AWS Cognito under the user pool > App Integration > Configuration
  CognitoClientID:
    Type: String
    Default: 7asah0n7edj39i2b9st1fu1olo
    Description: ID of the app client created in AWS Cognito.  It's found in AWS Cognito under App client information > Client ID
  CognitoLogoutCallbackURI:
    Type: String
    Default: /
    Description: Path within the gallery web app (GalleryAppBaseURI) to send users after Cognito logs them out.

# -----------------------------------------------------------------------------
# Output values for use after AWS creates the stack, such as to:
#  - Import into other stacks (to create cross-stack references)
#  - Return in response (to describe stack calls)
#  - View on the AWS CloudFormation console
# For example, you can output a S3 bucket name for a stack to make the bucket
# easier to find.
# -----------------------------------------------------------------------------
Outputs:
  WebEndpoint:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/"


# ------------------------------------------------------------------------------
# Configuration inheritable by all Lambda functions and other types of Resources
# ------------------------------------------------------------------------------
Globals:
  Api:
    Name: Tacocat Gallery Authentication API
    Domain:
      DomainName: !Ref AuthAppDomain
      CertificateArn: arn:aws:acm:us-east-1:010410881828:certificate/7ec6fa1d-6181-4b69-8ee0-df7e1f15a537
  Function:
    Runtime: nodejs18.x
    Architectures:
      - x86_64
    MemorySize: 128
    Timeout: 100

# -----------------------------------------------------------------------------
# Resources are the actual AWS systems that will be provisioned
# -----------------------------------------------------------------------------
Resources:

  # -----------------------------------------------------------------------------
  # A Layer is a set of files that gets zipped up and included with a Lambda
  # This contains the TypeScript library modules that Lambda functions will call
  # -----------------------------------------------------------------------------
  LayerCommons:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: src/layers/commons/
      CompatibleRuntimes:
        - nodejs18.x
      RetentionPolicy: Delete
    Metadata:
      BuildMethod: makefile


  # Lambda for retrieving authentication status
  AuthStatusFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: HTTP GET method to get authentication status
      Handler: src/handlers/authStatus.handler
      Layers:
        - !Ref LayerCommons
      Environment:
        Variables:
          AuthAppDomain: !Ref AuthAppDomain
          GalleryAppBaseURI: !Ref GalleryAppBaseURI
          CognitoUserPoolID: !Ref CognitoUserPoolID
          CognitoBaseURI: !Ref CognitoBaseURI
          CognitoClientID: !Ref CognitoClientID
          CognitoLogoutCallbackURI: !Ref CognitoLogoutCallbackURI
          CognitoClientSecret: "{{resolve:secretsmanager:Tacocat/Gallery/Authentication:SecretString:TacocatGalleryCognitoClientSecret}}"
      Events:
        Api:
          Type: Api
          Properties:
            Path: /
            Method: GET
    Metadata:
      BuildProperties:
        External:
          commons

  # Lambda for redirecting to the AWS Cognito login page
  RedirectToCognitoFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: HTTP GET method for redirecting to the AWS Cognito login page
      Handler: src/handlers/redirectToCognito.handler
      Layers:
        - !Ref LayerCommons
      Environment:
        Variables:
          AuthAppDomain: !Ref AuthAppDomain
          GalleryAppBaseURI: !Ref GalleryAppBaseURI
          CognitoUserPoolID: !Ref CognitoUserPoolID
          CognitoBaseURI: !Ref CognitoBaseURI
          CognitoClientID: !Ref CognitoClientID
          CognitoLogoutCallbackURI: !Ref CognitoLogoutCallbackURI
          CognitoClientSecret: "{{resolve:secretsmanager:Tacocat/Gallery/Authentication:SecretString:TacocatGalleryCognitoClientSecret}}"
      Events:
        Api:
          Type: Api
          Properties:
            Path: /login
            Method: GET
    Metadata:
      BuildProperties:
        External:
          commons

  # Lambda for handling the login callback from the AWS Cognito login page
  LoginCallbackFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Handles the login callback from the AWS Cognito login page
      Handler: src/handlers/loginCallback.handler
      Layers:
        - !Ref LayerCommons
      Environment:
        Variables:
          AuthAppDomain: !Ref AuthAppDomain
          GalleryAppBaseURI: !Ref GalleryAppBaseURI
          CognitoUserPoolID: !Ref CognitoUserPoolID
          CognitoBaseURI: !Ref CognitoBaseURI
          CognitoClientID: !Ref CognitoClientID
          CognitoLogoutCallbackURI: !Ref CognitoLogoutCallbackURI
          CognitoClientSecret: "{{resolve:secretsmanager:Tacocat/Gallery/Authentication:SecretString:TacocatGalleryCognitoClientSecret}}"
      Events:
        Api:
          Type: Api
          Properties:
            Path: /login_callback
            Method: GET
    Metadata:
      BuildProperties:
        External:
          commons

  # Lambda for logging the user out
  LogoutFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Log the user out
      Handler: src/handlers/logout.handler
      Layers:
        - !Ref LayerCommons
      Environment:
        Variables:
          AuthAppDomain: !Ref AuthAppDomain
          GalleryAppBaseURI: !Ref GalleryAppBaseURI
          CognitoUserPoolID: !Ref CognitoUserPoolID
          CognitoBaseURI: !Ref CognitoBaseURI
          CognitoClientID: !Ref CognitoClientID
          CognitoLogoutCallbackURI: !Ref CognitoLogoutCallbackURI
          CognitoClientSecret: "{{resolve:secretsmanager:Tacocat/Gallery/Authentication:SecretString:TacocatGalleryCognitoClientSecret}}"
      Events:
        Api:
          Type: Api
          Properties:
            Path: /logout
            Method: GET
    Metadata:
      BuildProperties:
        External:
          commons
